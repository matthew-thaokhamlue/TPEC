/** * Main Application Module * Coordinates all modules and handles page-specific functionality */class App {  constructor() {    this.initialized = false;    this.projects = null;  }  async init() {    if (this.initialized) return;    try {      await i18n.init();      if (window.Motion) {        await window.Motion.init();      }      this.bindGlobalEvents();      this.handlePageSpecificInit();      this.initialized = true;      console.log('App initialized successfully');    } catch (error) {      console.error('Failed to initialize app:', error);      this.handlePageSpecificInit();    }  }  bindGlobalEvents() {    document.addEventListener('click', (e) => {      const link = e.target.closest('a[target="_blank"]');      if (link) {        link.setAttribute('rel', 'noopener noreferrer');      }    });    document.addEventListener('click', (e) => {      this.handleContactClick(e);    });    document.addEventListener('submit', (e) => {      this.handleFormSubmit(e);    });    window.addEventListener('resize', () => {      this.handleResize();    });    window.addEventListener('scroll', () => {      this.handleScroll();    });    window.addEventListener('languageChanged', (e) => {      this.handleLanguageChange(e.detail.language);    });  }  handlePageSpecificInit() {    const currentPage = this.getCurrentPage();    switch (currentPage) {      case 'home':        this.initHomePage();        break;      case 'about':        this.initAboutPage();        break;      case 'projects':        this.initProjectsPage();        break;      case 'contact':        this.initContactPage();        break;      default:        console.log('No specific initialization for this page');    }  }  getCurrentPage() {    const path = window.location.pathname;    if (path === '/' || path === '/index.html') {      return 'home';    } else if (path.includes('about')) {      return 'about';    } else if (path.includes('projects')) {      return 'projects';    } else if (path.includes('contact')) {      return 'contact';    }    return 'unknown';  }  initHomePage() {    console.log('Initializing home page');    this.renderServices();    this.renderFeaturedProjects();    this.initCounters();    this.setupParallaxEffects();  }  initAboutPage() {    console.log('Initializing about page');    this.renderApproachTimeline();    this.renderCapabilities();    this.renderLeadershipTeam();    this.renderCertifications();    this.setupAnchorNavigation();  }  initProjectsPage() {    console.log('Initializing projects page');    this.loadProjects();    this.setupProjectTabs();    this.setupProjectDeepLinking();  }  initContactPage() {    console.log('Initializing contact page');    this.setupContactMethods();  }  setupContactMethods() {    const emailLinks = document.querySelectorAll('a[href^="mailto:"]');    emailLinks.forEach(link => {      link.addEventListener('click', (e) => {        const href = link.getAttribute('href');        if (!href.includes('subject=')) {          const subject = encodeURIComponent(i18n.t('contact.email.subject', 'Construction Consulting Inquiry'));          link.setAttribute('href', `${href}?subject=${subject}`);        }      });    });    const whatsappLinks = document.querySelectorAll('a[href*="whatsapp"]');    whatsappLinks.forEach(link => {      link.addEventListener('click', (e) => {        const href = link.getAttribute('href');        if (!href.includes('text=')) {          const message = encodeURIComponent(i18n.t('contact.whatsapp.message', 'Hello, I would like to inquire about your construction consulting services.'));          const separator = href.includes('?') ? '&' : '?';          link.setAttribute('href', `${href}${separator}text=${message}`);        }      });    });  }  handleContactClick(e) {    const contactElement = e.target.closest('[data-contact-method]');    if (!contactElement) return;    const method = contactElement.getAttribute('data-contact-method');    const value = contactElement.getAttribute('data-contact-value');    switch (method) {      case 'email':        this.openEmail(value);        break;      case 'whatsapp':        this.openWhatsApp(value);        break;      case 'facebook':        this.openFacebook(value);        break;    }  }  openEmail(email) {    const subject = encodeURIComponent(i18n.t('contact.email.subject', 'Construction Consulting Inquiry'));    const body = encodeURIComponent(i18n.t('contact.email.body', 'Hello,\n\nI would like to inquire about your construction consulting services.\n\nBest regards'));    window.location.href = `mailto:${email}?subject=${subject}&body=${body}`;  }  openWhatsApp(phone) {    const message = encodeURIComponent(i18n.t('contact.whatsapp.message', 'Hello, I would like to inquire about your construction consulting services.'));    const cleanPhone = phone.replace(/[^\d+]/g, '');    window.open(`https://wa.me/${cleanPhone}?text=${message}`, '_blank', 'noopener,noreferrer');  }  openFacebook(url) {    window.open(url, '_blank', 'noopener,noreferrer');  }  handleFormSubmit(e) {    console.log('Form submitted:', e.target);  }  handleResize() {    this.updateViewportHeight();  }  handleScroll() {    if (window.Motion && window.Motion.scrollTriggerLoaded) {      return;    }    this.handleScrollFallback();  }  handleScrollFallback() {    if (!this.intersectionObserver) {      this.setupIntersectionObserver();    }  }  setupIntersectionObserver() {    if (window.Motion && window.Motion.gsapLoaded) {      return;    }    const options = {      threshold: 0.1,      rootMargin: '0px 0px -20% 0px'    };    this.intersectionObserver = new IntersectionObserver((entries) => {      entries.forEach(entry => {        if (entry.isIntersecting) {          entry.target.classList.add('in-view');          this.intersectionObserver.unobserve(entry.target);        }      });    }, options);    const revealElements = document.querySelectorAll('.reveal-up');    revealElements.forEach(el => {      this.intersectionObserver.observe(el);    });  }  updateViewportHeight() {    const vh = window.innerHeight * 0.01;    document.documentElement.style.setProperty('--vh', `${vh}px`);  }  renderServices() {    const servicesGrid = document.querySelector('.services-grid');    if (!servicesGrid) return;    const services = i18n.t('services.items', []);    if (!Array.isArray(services) || services.length === 0) {      console.warn('No services data found');      return;    }    servicesGrid.innerHTML = '';    services.forEach((service, index) => {      const serviceCard = document.createElement('div');      serviceCard.className = 'card reveal-up';      serviceCard.style.setProperty('--delay', `${index * 0.1}s`);      serviceCard.setAttribute('role', 'listitem');      serviceCard.setAttribute('aria-label', `Service: ${service.title}`);      serviceCard.innerHTML = `        <div class="card-header">          <h3 class="card-title">${service.title}</h3>          <p class="card-description">${service.description}</p>        </div>      `;      servicesGrid.appendChild(serviceCard);    });    console.log(`Rendered ${services.length} service cards`);  }  async renderFeaturedProjects() {    const projectsGrid = document.querySelector('.projects-grid');    if (!projectsGrid) return;    try {      const response = await fetch('assets/data/projects.json');      if (!response.ok) {        throw new Error(`Failed to load projects: ${response.status}`);      }      const data = await response.json();      const featuredProjects = data.projects.filter(project => project.featured);      if (featuredProjects.length === 0) {        console.warn('No featured projects found');        return;      }      projectsGrid.innerHTML = '';      featuredProjects.forEach((project, index) => {        const projectCard = document.createElement('div');        projectCard.className = 'card reveal-up';        projectCard.style.setProperty('--delay', `${index * 0.15}s`);        projectCard.setAttribute('role', 'listitem');        projectCard.setAttribute('tabindex', '0');        projectCard.setAttribute('aria-label', `Featured project: ${project.title} in ${project.location}`);        const summary = i18n.t(project.summary_i18n_key, 'Project description not available');        projectCard.innerHTML = `          <div class="card-header">            <h3 class="card-title">${project.title}</h3>            <p class="card-description">${summary}</p>            <div style="margin-top: var(--space-lg); display: flex; justify-content: space-between; align-items: center; font-size: var(--font-size-sm); color: var(--text-muted);">              <span aria-label="Location: ${project.location}">${project.location}</span>              <span aria-label="Year: ${project.year}">${project.year}</span>            </div>          </div>        `;        projectCard.style.cursor = 'pointer';        const handleClick = () => {          window.location.href = `projects.html#${project.slug}`;        };        projectCard.addEventListener('click', handleClick);        projectCard.addEventListener('keydown', (e) => {          if (e.key === 'Enter' || e.key === ' ') {            e.preventDefault();            handleClick();          }        });        projectsGrid.appendChild(projectCard);      });      console.log(`Rendered ${featuredProjects.length} featured project cards`);    } catch (error) {      console.error('Failed to load featured projects:', error);      this.showError(i18n.t('loading.error', 'Failed to load content. Please try again.'));    }  }  initCounters() {    const counters = document.querySelectorAll('.counter');    if (counters.length === 0) return;    if (window.Motion && window.Motion.gsapLoaded) {      this.initCountersWithGSAP(counters);    } else {      this.initCountersWithIntersectionObserver(counters);    }  }  initCountersWithGSAP(counters) {    counters.forEach(counter => {      const target = parseInt(counter.getAttribute('data-target')) || parseInt(counter.textContent);      const duration = 2;      counter.textContent = '0';      const animation = window.gsap.to(counter, {        duration: duration,        ease: "power2.out",        onUpdate: function() {          const current = Math.round(this.progress() * target);          counter.textContent = current.toLocaleString();        },        onComplete: function() {          counter.textContent = target.toLocaleString();        }      });      animation.pause();      if (window.ScrollTrigger) {        window.ScrollTrigger.create({          trigger: counter,          start: "top 80%",          onEnter: () => animation.play(),          once: true        });      }    });  }  initCountersWithIntersectionObserver(counters) {    const counterObserver = new IntersectionObserver((entries) => {      entries.forEach(entry => {        if (entry.isIntersecting) {          const counter = entry.target;          const target = parseInt(counter.getAttribute('data-target')) || parseInt(counter.textContent);          this.animateCounterFallback(counter, target);          counterObserver.unobserve(counter);        }      });    }, {      threshold: 0.5,      rootMargin: '0px 0px -20% 0px'    });    counters.forEach(counter => {      counterObserver.observe(counter);    });  }  animateCounterFallback(counter, target) {    const duration = 2000; // 2 seconds    const startTime = performance.now();    const startValue = 0;    const updateCounter = (currentTime) => {      const elapsed = currentTime - startTime;      const progress = Math.min(elapsed / duration, 1);      const easeOut = 1 - Math.pow(1 - progress, 3);      const current = Math.round(startValue  (target - startValue) * easeOut);      counter.textContent = current.toLocaleString();      if (progress < 1) {        requestAnimationFrame(updateCounter);      } else {        counter.textContent = target.toLocaleString();      }    };    requestAnimationFrame(updateCounter);  }  setupParallaxEffects() {    if (!window.Motion || !window.Motion.gsapLoaded) return;    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) return;    const parallaxElements = document.querySelectorAll('.parallax-y');    parallaxElements.forEach(element => {      if (window.ScrollTrigger) {        window.ScrollTrigger.create({          trigger: element,          start: "top bottom",          end: "bottom top",          scrub: true,          onUpdate: self => {            const y = self.progress * 50; // Adjust parallax intensity            window.gsap.set(element, { y: y });          }        });      }    });    console.log(`Setup parallax effects for ${parallaxElements.length} elements`);  }  handleLanguageChange(language) {    console.log(`Handling language change to: ${language}`);    const currentPage = this.getCurrentPage();    if (currentPage === 'home') {      this.renderServices();      this.renderFeaturedProjects();    } else if (currentPage === 'about') {      this.renderApproachTimeline();      this.renderCapabilities();      this.renderLeadershipTeam();      this.renderCertifications();    } else if (currentPage === 'projects') {      this.renderProjectTabs();    }  }  renderApproachTimeline() {    const timeline = document.querySelector('.timeline');    if (!timeline) return;    const steps = i18n.t('about.approach.steps', []);    if (!Array.isArray(steps) || steps.length === 0) {      console.warn('No approach steps data found');      return;    }    timeline.innerHTML = '';    steps.forEach((step, index) => {      const stepElement = document.createElement('div');      stepElement.className = 'timeline-step reveal-up';      stepElement.setAttribute('data-step', index  1);      stepElement.setAttribute('role', 'listitem');      stepElement.setAttribute('aria-label', `Step ${index  1}: ${step.title}`);      stepElement.style.setProperty('--delay', `${index * 0.2}s`);      stepElement.innerHTML = `        <h3>${step.title}</h3>        <p>${step.description}</p>      `;      timeline.appendChild(stepElement);    });    console.log(`Rendered ${steps.length} timeline steps`);  }  renderCapabilities() {    const capabilitiesGrid = document.querySelector('.capabilities-grid');    if (!capabilitiesGrid) return;    const capabilities = i18n.t('about.capabilities.items', []);    if (!Array.isArray(capabilities) || capabilities.length === 0) {      console.warn('No capabilities data found');      return;    }    capabilitiesGrid.innerHTML = '';    capabilities.forEach((capability, index) => {      const capabilityElement = document.createElement('div');      capabilityElement.className = 'capability-item reveal-up';      capabilityElement.setAttribute('role', 'listitem');      capabilityElement.style.setProperty('--delay', `${index * 0.1}s`);      capabilityElement.innerHTML = `        <span>${capability}</span>      `;      capabilitiesGrid.appendChild(capabilityElement);    });    console.log(`Rendered ${capabilities.length} capabilities`);  }  renderLeadershipTeam() {    const teamGrid = document.querySelector('.team-grid');    if (!teamGrid) return;    const placeholderTeam = [      {        name: 'Leadership Team',        title: 'Coming Soon',        bio: 'Detailed leadership profiles will be added here.',        photo: null      }    ];    teamGrid.innerHTML = '';    placeholderTeam.forEach((member, index) => {      const memberElement = document.createElement('div');      memberElement.className = 'team-member reveal-up';      memberElement.setAttribute('role', 'listitem');      memberElement.setAttribute('aria-label', `Team member: ${member.name}, ${member.title}`);      memberElement.style.setProperty('--delay', `${index * 0.2}s`);      const photoContent = member.photo         ? `<img src="${member.photo}" alt="Photo of ${member.name}" loading="lazy" width="120" height="120">`        : '<span aria-label="Placeholder photo">👤</span>';      memberElement.innerHTML = `        <div class="team-photo">${photoContent}</div>        <h3 class="team-name">${member.name}</h3>        <p class="team-title">${member.title}</p>        <p class="team-bio">${member.bio}</p>      `;      teamGrid.appendChild(memberElement);    });    console.log(`Rendered ${placeholderTeam.length} team members`);  }  renderCertifications() {    const certificationsList = document.querySelector('.certifications-list');    if (!certificationsList) return;    const certifications = i18n.t('about.certifications.items', []);    if (!Array.isArray(certifications) || certifications.length === 0) {      console.warn('No certifications data found');      return;    }    certificationsList.innerHTML = '';    certifications.forEach((certification, index) => {      const certificationElement = document.createElement('div');      certificationElement.className = 'certification-item reveal-up';      certificationElement.setAttribute('role', 'listitem');      certificationElement.style.setProperty('--delay', `${index * 0.1}s`);      certificationElement.innerHTML = `        <span>${certification}</span>      `;      certificationsList.appendChild(certificationElement);    });    console.log(`Rendered ${certifications.length} certifications`);  }  setupAnchorNavigation() {    const anchorNav = document.getElementById('anchor-nav');    const anchorLinks = document.querySelectorAll('.anchor-nav-link');    if (!anchorNav || anchorLinks.length === 0) return;    anchorLinks.forEach(link => {      link.addEventListener('click', (e) => {        e.preventDefault();        const targetId = link.getAttribute('href').substring(1);        const targetElement = document.getElementById(targetId);        if (targetElement) {          const headerHeight = document.querySelector('header').offsetHeight;          const anchorNavHeight = anchorNav.offsetHeight;          const offset = headerHeight  anchorNavHeight  20; // 20px extra padding          const targetPosition = targetElement.offsetTop - offset;          window.scrollTo({            top: targetPosition,            behavior: 'smooth'          });          this.updateAnchorNavActive(link);        }      });    });    let ticking = false;    const updateActiveOnScroll = () => {      if (!ticking) {        requestAnimationFrame(() => {          this.updateAnchorNavOnScroll();          ticking = false;        });        ticking = true;      }    };    window.addEventListener('scroll', updateActiveOnScroll);    this.updateAnchorNavOnScroll();    console.log('Setup anchor navigation with', anchorLinks.length, 'links');  }  updateAnchorNavActive(activeLink) {    const anchorLinks = document.querySelectorAll('.anchor-nav-link');    anchorLinks.forEach(link => link.classList.remove('active'));    activeLink.classList.add('active');  }  updateAnchorNavOnScroll() {    const anchorLinks = document.querySelectorAll('.anchor-nav-link');    const sections = Array.from(anchorLinks).map(link => {      const targetId = link.getAttribute('href').substring(1);      return {        link,        element: document.getElementById(targetId)      };    }).filter(item => item.element);    if (sections.length === 0) return;    const scrollPosition = window.scrollY;    const headerHeight = document.querySelector('header').offsetHeight;    const anchorNavHeight = document.getElementById('anchor-nav').offsetHeight;    const offset = headerHeight  anchorNavHeight  100; // Extra offset for better UX    let activeSection = null;    for (let i = sections.length - 1; i >= 0; i--) {      const section = sections[i];      const sectionTop = section.element.offsetTop - offset;      if (scrollPosition >= sectionTop) {        activeSection = section;        break;      }    }    if (activeSection) {      this.updateAnchorNavActive(activeSection.link);    }  }  async loadProjects() {    try {      this.showProjectsLoading();      const response = await fetch('/assets/data/projects.json');      if (!response.ok) {        throw new Error(`Failed to load projects: ${response.status}`);      }      const data = await response.json();      this.projects = data.projects || [];      this.renderProjectTabs();      this.hideProjectsLoading();      if (this.initialHash) {        const project = this.projects.find(p => p.slug === this.initialHash);        if (project) {          setTimeout(() => {            this.showProjectDetail(project);          }, 500);        }      }      console.log(`Loaded ${this.projects.length} projects`);    } catch (error) {      console.error('Failed to load projects:', error);      this.projects = []; // Set empty array as fallback      this.showProjectsError(i18n.t('loading.error', 'Failed to load projects. Please try again.'));      this.hideProjectsLoading();    }  }  renderProjectTabs() {    const ongoingGrid = document.getElementById('ongoing-projects');    const completedGrid = document.getElementById('completed-projects');    if (!ongoingGrid || !completedGrid || !this.projects) return;    const ongoingProjects = this.projects.filter(project => project.status === 'ongoing');    const completedProjects = this.projects.filter(project => project.status === 'completed');    this.renderProjectGrid(ongoingGrid, ongoingProjects);    this.renderProjectGrid(completedGrid, completedProjects);    console.log(`Rendered ${ongoingProjects.length} ongoing and ${completedProjects.length} completed projects`);  }  renderProjectGrid(container, projects) {    if (!container || !projects) return;    container.innerHTML = '';    if (projects.length === 0) {      const emptyMessage = document.createElement('div');      emptyMessage.className = 'empty-state';      emptyMessage.innerHTML = `        <p>${i18n.t('projects.empty', 'No projects found in this category.')}</p>      `;      container.appendChild(emptyMessage);      return;    }    projects.forEach((project, index) => {      const projectCard = this.createProjectCard(project, index);      container.appendChild(projectCard);    });  }  createProjectCard(project, index) {    const card = document.createElement('div');    card.className = 'project-card reveal-up';    card.style.setProperty('--delay', `${index * 0.1}s`);    card.setAttribute('data-project-slug', project.slug);    const summary = i18n.t(project.summary_i18n_key, 'Project description not available');    card.innerHTML = `      <div class="project-card-image">        <img           src="${project.cover}"           alt="Project image for ${project.title} - ${project.scope} in ${project.location}"          loading="lazy"          width="400"          height="250"          style="aspect-ratio: 16/10; object-fit: cover;"          onerror="this.src='/assets/img/placeholder-project.jpg'; this.alt='Placeholder image for ${project.title}'"        >        <div class="project-card-overlay">          <button class="project-view-btn" data-i18n="projects.details.view_details" aria-label="View details for ${project.title}">View Details</button>        </div>      </div>      <div class="project-card-content">        <h3 class="project-card-title">${project.title}</h3>        <p class="project-card-summary">${summary}</p>        <div class="project-card-meta">          <span class="project-location" aria-label="Location: ${project.location}">${project.location}</span>          <span class="project-year" aria-label="Year: ${project.year}">${project.year}</span>        </div>        <div class="project-card-scope" aria-label="Scope: ${project.scope}">${project.scope}</div>      </div>    `;    card.addEventListener('click', (e) => {      e.preventDefault();      this.showProjectDetail(project);    });    return card;  }  setupProjectTabs() {    const tabButtons = document.querySelectorAll('.tab-btn');    const tabContents = document.querySelectorAll('.tab-content');    if (tabButtons.length === 0 || tabContents.length === 0) return;    const switchTab = (targetButton) => {      const targetTab = targetButton.getAttribute('data-tab');      tabButtons.forEach(btn => {        btn.classList.remove('active');        btn.setAttribute('aria-selected', 'false');        btn.setAttribute('tabindex', '-1');      });      targetButton.classList.add('active');      targetButton.setAttribute('aria-selected', 'true');      targetButton.setAttribute('tabindex', '0');      tabContents.forEach(content => {        content.classList.remove('active');        content.setAttribute('aria-hidden', 'true');        if (content.id === `${targetTab}-projects`) {          content.classList.add('active');          content.setAttribute('aria-hidden', 'false');        }      });      console.log(`Switched to ${targetTab} projects tab`);    };    tabButtons.forEach((button, index) => {      if (index === 0) {        button.setAttribute('tabindex', '0');      } else {        button.setAttribute('tabindex', '-1');      }      button.addEventListener('click', (e) => {        e.preventDefault();        switchTab(button);      });      button.addEventListener('keydown', (e) => {        let targetIndex = Array.from(tabButtons).indexOf(button);        switch (e.key) {          case 'ArrowLeft':          case 'ArrowUp':            e.preventDefault();            targetIndex = targetIndex > 0 ? targetIndex - 1 : tabButtons.length - 1;            tabButtons[targetIndex].focus();            switchTab(tabButtons[targetIndex]);            break;          case 'ArrowRight':          case 'ArrowDown':            e.preventDefault();            targetIndex = targetIndex < tabButtons.length - 1 ? targetIndex  1 : 0;            tabButtons[targetIndex].focus();            switchTab(tabButtons[targetIndex]);            break;          case 'Home':            e.preventDefault();            tabButtons[0].focus();            switchTab(tabButtons[0]);            break;          case 'End':            e.preventDefault();            tabButtons[tabButtons.length - 1].focus();            switchTab(tabButtons[tabButtons.length - 1]);            break;        }      });    });    console.log('Setup project tabs with', tabButtons.length, 'buttons');  }  showProjectDetail(project) {    const detailSection = document.getElementById('project-detail');    if (!detailSection) return;    window.history.pushState(null, null, `#${project.slug}`);    const summary = i18n.t(project.summary_i18n_key, 'Project description not available');    detailSection.innerHTML = `      <div class="project-detail-header">        <button class="project-detail-close" aria-label="${i18n.t('projects.details.close_details', 'Close Details')}" title="${i18n.t('projects.details.close_details', 'Close Details')}">          <span aria-hidden="true">&times;</span>        </button>      </div>      <div class="project-detail-hero parallax-y">        <img           src="${project.cover}"           alt="${project.title}"          loading="eager"          style="object-fit: cover;"          onerror="this.src='/assets/img/placeholder-project.jpg'"        >        <div class="project-detail-hero-content">          <h1 id="project-detail-title" class="project-detail-title reveal-up">${project.title}</h1>          <p class="project-detail-location reveal-up">${project.location}</p>        </div>      </div>      <div class="project-detail-content">        <div class="container">          <div class="project-detail-info reveal-up">            <div class="project-info-grid">              <div class="project-info-item">                <h3 data-i18n="projects.details.scope">${i18n.t('projects.details.scope', 'Project Scope')}</h3>                <p>${project.scope}</p>              </div>              <div class="project-info-item">                <h3 data-i18n="projects.details.location">${i18n.t('projects.details.location', 'Location')}</h3>                <p>${project.location}</p>              </div>              <div class="project-info-item">                <h3 data-i18n="projects.details.year">${i18n.t('projects.details.year', 'Year')}</h3>                <p>${project.year}</p>              </div>              <div class="project-info-item">                <h3 data-i18n="projects.details.status">${i18n.t('projects.details.status', 'Status')}</h3>                <p class="project-status project-status-${project.status}">${project.status}</p>              </div>            </div>          </div>          <div class="project-detail-summary reveal-up">            <h2>Project Overview</h2>            <p>${summary}</p>          </div>          ${project.gallery && project.gallery.length > 0 ? this.renderProjectGallery(project.gallery) : ''}        </div>      </div>    `;    detailSection.classList.remove('hidden');    detailSection.setAttribute('role', 'dialog');    detailSection.setAttribute('aria-modal', 'true');    detailSection.setAttribute('aria-labelledby', 'project-detail-title');    detailSection.scrollIntoView({ behavior: 'smooth' });    setTimeout(() => {      const closeBtn = detailSection.querySelector('.project-detail-close');      if (closeBtn) {        closeBtn.focus();      }    }, 300);    const closeBtn = detailSection.querySelector('.project-detail-close');    if (closeBtn) {      closeBtn.addEventListener('click', () => {        this.hideProjectDetail();      });    }    const handleKeyDown = (e) => {      if (e.key === 'Escape') {        this.hideProjectDetail();        document.removeEventListener('keydown', handleKeyDown);      }    };    document.addEventListener('keydown', handleKeyDown);    if (window.Motion && window.Motion.gsapLoaded) {      this.setupProjectDetailAnimations(detailSection);    }    if (window.seoManager) {      window.seoManager.injectProjectStructuredData(project);    }    console.log(`Showing details for project: ${project.title}`);  }  renderProjectGallery(gallery) {    if (!gallery || gallery.length === 0) return '';    const galleryItems = gallery.map((image, index) => `      <div class="project-gallery-item reveal-up" style="--delay: ${index * 0.1}s">        <img           src="${image}"           alt="Project gallery image ${index  1}"          loading="lazy"          style="aspect-ratio: 4/3; object-fit: cover;"          onerror="this.src='/assets/img/placeholder-project.jpg'"        >      </div>    `).join('');    return `      <div class="project-detail-gallery reveal-up">        <h2>Project Gallery</h2>        <div class="project-gallery-grid">          ${galleryItems}        </div>      </div>    `;  }  hideProjectDetail() {    const detailSection = document.getElementById('project-detail');    if (!detailSection) return;    detailSection.classList.add('hidden');    detailSection.removeAttribute('role');    detailSection.removeAttribute('aria-modal');    detailSection.removeAttribute('aria-labelledby');    window.history.pushState(null, null, window.location.pathname);    if (window.seoManager) {      window.seoManager.removeProjectStructuredData();    }    console.log('Hidden project detail');  }  setupProjectDeepLinking() {    this.initialHash = window.location.hash.substring(1);    if (this.initialHash && this.projects) {      const project = this.projects.find(p => p.slug === this.initialHash);      if (project) {        setTimeout(() => {          this.showProjectDetail(project);        }, 500);      }    }    window.addEventListener('hashchange', () => {      const newHash = window.location.hash.substring(1);      if (!newHash) {        this.hideProjectDetail();      } else if (this.projects) {        const project = this.projects.find(p => p.slug === newHash);        if (project) {          this.showProjectDetail(project);        }      }    });    console.log('Setup project deep linking');  }  setupProjectDetailAnimations(detailSection) {    if (!window.Motion || !window.Motion.gsapLoaded) return;    const heroImage = detailSection.querySelector('.project-detail-hero img');    if (heroImage && window.ScrollTrigger) {      window.ScrollTrigger.create({        trigger: heroImage,        start: "top bottom",        end: "bottom top",        scrub: true,        onUpdate: self => {          const y = self.progress * 50;          window.gsap.set(heroImage, { y: y });        }      });    }    const revealElements = detailSection.querySelectorAll('.reveal-up');    revealElements.forEach((element, index) => {      if (window.ScrollTrigger) {        window.ScrollTrigger.create({          trigger: element,          start: "top 80%",          onEnter: () => {            window.gsap.fromTo(element,               { y: 24, opacity: 0 },              {                 y: 0,                 opacity: 1,                 duration: 0.6,                 ease: "power2.out",                delay: index * 0.1              }            );          },          once: true        });      }    });    console.log('Setup project detail animations');  }  showProjectsLoading() {    const ongoingGrid = document.getElementById('ongoing-projects');    const completedGrid = document.getElementById('completed-projects');    if (ongoingGrid) {      ongoingGrid.innerHTML = '<div class="projects-loading">Loading projects...</div>';    }    if (completedGrid) {      completedGrid.innerHTML = '<div class="projects-loading">Loading projects...</div>';    }  }  hideProjectsLoading() {  }  showProjectsError(message) {    const ongoingGrid = document.getElementById('ongoing-projects');    const completedGrid = document.getElementById('completed-projects');    const errorHtml = `<div class="projects-error">${message}</div>`;    if (ongoingGrid) {      ongoingGrid.innerHTML = errorHtml;    }    if (completedGrid) {      completedGrid.innerHTML = errorHtml;    }  }  showLoading(message = null) {    const loadingMessage = message || i18n.t('loading.default', 'Loading...');    console.log(loadingMessage);  }  hideLoading() {    console.log('Loading complete');  }  showError(message) {    const errorMessage = message || i18n.t('loading.error', 'An error occurred. Please try again.');    console.error(errorMessage);  }}const app = new App();if (document.readyState === 'loading') {  document.addEventListener('DOMContentLoaded', () => {    app.init();  });} else {  app.init();}if (typeof module !== 'undefined' && module.exports) {  module.exports = App;}window.app = app;